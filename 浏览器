from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *
import sys

class WebView(QWebEngineView):
    def __init__(self, parent):
        super().__init__(parent)

class MainDemo(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setWindowTitle('My_Browser')
        self.resize(800, 500)
        self.show()
        # 添加 URL 地址栏
        self.urlbar = QLineEdit()
        self.urlbar.returnPressed.connect(self.navigate_to_url)
        # 添加标签栏
        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True)
        self.tabs.tabBarDoubleClicked.connect(self.tab_open)
        self.tabs.currentChanged.connect(self.current_tab_changed)
        self.tabs.setTabsClosable(True)
        self.tabs.tabCloseRequested.connect(self.close_current_tab)
        self.add_new_tab(QUrl('https://www.bilibili.com/'), 'Homepage')  # 将百度改为 bilibili
        self.setCentralWidget(self.tabs)
        # 添加导航栏
        navigation_bar = QToolBar('Navigation')
        self.addToolBar(navigation_bar)
        # 添加前进、后退、停止加载和刷新的按钮
        back_button = QAction('Back', self)
        forward_button = QAction('Forward', self)
        stop_button = QAction('Stop', self)
        reload_button = QAction('Reload', self)
        back_button.triggered.connect(self.tabs.currentWidget().back)
        forward_button.triggered.connect(self.tabs.currentWidget().forward)
        stop_button.triggered.connect(self.tabs.currentWidget().stop)
        reload_button.triggered.connect(self.tabs.currentWidget().reload)
        # 将按钮添加到导航栏上
        navigation_bar.addAction(back_button)
        navigation_bar.addAction(forward_button)
        navigation_bar.addAction(stop_button)
        navigation_bar.addAction(reload_button)
        navigation_bar.addSeparator()
        navigation_bar.addWidget(self.urlbar)

    # 响应回车按钮，将浏览器当前访问的 URL 设置为用户输入的 URL
    def navigate_to_url(self):
        current_url = QUrl(self.urlbar.text())
        if current_url.scheme() == '':
            current = QUrl('http://')
            current_url = current.resolved(current_url)
        self.tabs.currentWidget().load(current_url)

    # 添加新的标签页
    def add_new_tab(self, qurl=QUrl(''), label='Blank'):
        self.browser = WebView(self)
        self.browser.load(qurl)
        i = self.tabs.addTab(self.browser, label)
        self.tabs.setCurrentIndex(i)
        self.browser.urlChanged.connect(lambda qurl, browser=self.browser: self.renew_urlbar(qurl, browser))
        self.browser.loadFinished.connect(lambda _, i=i, browser=self.browser: self.tabs.setTabText(i,
                                                                                                 self.browser.page().title()))

    # 双击标签栏打开新页面
    def tab_open(self, i):
        if i == -1:
            self.add_new_tab()

    def current_tab_changed(self, i):
        qurl = self.tabs.currentWidget().url()
        self.renew_urlbar(qurl, self.tabs.currentWidget())

    def close_current_tab(self, i):
        if self.tabs.count() < 2:
            return
        self.tabs.removeTab(i)

if __name__ == '__main__':
    my_application = QApplication(sys.argv)
    main_demo = MainDemo()
    main_demo.show()
    my_application.exec_()
